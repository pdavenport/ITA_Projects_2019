Code I wanted to implement:

----------------------------------Custom API requests with mux:-------------------------------------------

//CUSTOM REQUEST PARAMS V V V V
// var err error

// 	// Get the parameter passed to url and query the database based on this
// 	// parameter:
// 	params := mux.Vars(r)

// 	// If not an integer, we return an error:
// 	missionNumber := params["missionnumber"]
// 	_, err = strconv.Atoi(missionNumber)
// 	if err != nil {
// 		err = CustErr(err, "Mission number is not an integer.\nStopping here.")
// 		log.Println(err)
// 		http.Error(w, "Internal server error", http.StatusInternalServerError)
// 		return
// 	}
//CUSTOM SQL QUERY V V V V
// Make the sql query:
// sqlStatement := `SELECT * FROM email_checked_by_john
// WHERE mission_number = $1`
// rows, err := db.Query(sqlStatement, missionNumber)
// if err != nil {
// err = CustErr(err, "Following query failed: "+sqlStatement+"\nStopping here.")
// log.Println(err)
// http.Error(w, "Internal server error", http.StatusInternalServerError)
// return emails, err
// }
// defer rows.Close()

-----------------------------------Bcrypt for one way password auth------------------------------------------------

package main

import (
	"database/sql"
	"golang.org/x/crypto/bcrypt"
	"encoding/json"
	"net/http"
	_ "github.com/lib/pq"
)

// Create a struct that models the structure of a user, both in the request body, and in the DB
type Credentials struct {
	Password string `json:"password", db:"password"`
	Username string `json:"username", db:"username"`
}

func Signup(w http.ResponseWriter, r *http.Request){
	// Parse and decode the request body into a new `Credentials` instance
	creds := &Credentials{}
	err := json.NewDecoder(r.Body).Decode(creds)
	if err != nil {
		// If there is something wrong with the request body, return a 400 status
		w.WriteHeader(http.StatusBadRequest)
		return 
	}
	// Salt and hash the password using the bcrypt algorithm
	// The second argument is the cost of hashing, which we arbitrarily set as 8 (this value can be more or less, depending on the computing power you wish to utilize)
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(creds.Password), 8)

	// Next, insert the username, along with the hashed password into the database
	if _, err = db.Query("insert into users values ($1, $2)", creds.Username, string(hashedPassword)); err != nil {
		// If there is any issue with inserting into the database, return a 500 error
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	// We reach this point if the credentials we correctly stored in the database, and the default status of 200 is sent back
}

func Signin(w http.ResponseWriter, r *http.Request){
	// Parse and decode the request body into a new `Credentials` instance	
	creds := &Credentials{}
	err := json.NewDecoder(r.Body).Decode(creds)
	if err != nil {
		// If there is something wrong with the request body, return a 400 status		
		w.WriteHeader(http.StatusBadRequest)
		return 
	}
	// Get the existing entry present in the database for the given username
	result := db.QueryRow("select password from users where username=$1", creds.Username)
	if err != nil {
		// If there is an issue with the database, return a 500 error
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	// We create another instance of `Credentials` to store the credentials we get from the database
	storedCreds := &Credentials{}
	// Store the obtained password in `storedCreds`
	err = result.Scan(&storedCreds.Password)
	if err != nil {
		// If an entry with the username does not exist, send an "Unauthorized"(401) status
		if err == sql.ErrNoRows {
			w.WriteHeader(http.StatusUnauthorized)
			return
		}
		// If the error is of any other type, send a 500 status
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	// Compare the stored hashed password, with the hashed version of the password that was received
	if err = bcrypt.CompareHashAndPassword([]byte(storedCreds.Password), []byte(creds.Password)); err != nil {
		// If the two passwords don't match, return a 401 status
		w.WriteHeader(http.StatusUnauthorized)
	}

    ------------------------------TODO--------------------------------------
    switch API to gorilla mux
    add PUT/DELETE requests
    sanatize inputs
    .ENV file for security
    search page using mux queries
    filter page using dropdown bar
    w3 validation
    security features (salt&hash)
    update css for flexbox
    fix banner slider
    regex for sanitation for any fields
    button for PDF of dummy order using order table
    list of users subbed to newsletter
    host local files with docker as well (FROM nginx:alpine COPY . /usr/share/nginx/html)
    search via query: (https://github.com/VertNet/webapp/wiki/The-API-search-function)
-------------------------search/filter via indexof: ----------------------------
<script>
function myFunction() {
  // Declare variables 
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("myInput");
  filter = input.value.toUpperCase();
  table = document.getElementById("myTable");
  tr = table.getElementsByTagName("tr");

  // Loop through all table rows, and hide those who don't match the search query
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[0];
    if (td) {
      txtValue = td.textContent || td.innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    } 
  }
}
</script>